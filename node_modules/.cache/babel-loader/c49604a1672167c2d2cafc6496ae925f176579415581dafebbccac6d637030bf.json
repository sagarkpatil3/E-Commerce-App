{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBuDJJZD3Yzk5IF_SS1ufeHdgZonmsZFlY\",\n  authDomain: \"e-commerce-innocaption.firebaseapp.com\",\n  projectId: \"e-commerce-innocaption\",\n  storageBucket: \"e-commerce-innocaption.appspot.com\",\n  messagingSenderId: \"847737154492\",\n  appId: \"1:847737154492:web:5ecf4c77c48010386c59b9\"\n};\nconst firebaseApp = initializeApp(firebaseConfig);\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => {\n  signInWithPopup(auth, googleProvider).catch(error => {\n    console.log(\"Caught error Popup closed\");\n  });\n  ;\n};\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async (userAuth, additionalInformation = {}) => {\n  if (!userAuth) return;\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef);\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation\n      });\n    } catch (error) {\n      console.log('error creating the user', error.message);\n    }\n  }\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};\nexport const signOutUser = async () => await signOut(auth);\nexport const onAuthStateChangedListener = callback => onAuthStateChanged(auth, callback);","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopup","catch","error","console","log","signInWithGoogleRedirect","db","createUserDocumentFromAuth","userAuth","additionalInformation","userDocRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","message","createAuthUserWithEmailAndPassword","password","signInAuthUserWithEmailAndPassword","signOutUser","onAuthStateChangedListener","callback"],"sources":["/Users/sagarpatil/internship_assignments/innocaption/e-commerce-innocaption/src/utils/firebase.utils.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\n\nimport {\n    getAuth,\n    signInWithRedirect,\n    signInWithPopup,\n    GoogleAuthProvider,\n    createUserWithEmailAndPassword,\n    signInWithEmailAndPassword,\n    signOut,\n    onAuthStateChanged,\n  } from 'firebase/auth';\n\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBuDJJZD3Yzk5IF_SS1ufeHdgZonmsZFlY\",\n  authDomain: \"e-commerce-innocaption.firebaseapp.com\",\n  projectId: \"e-commerce-innocaption\",\n  storageBucket: \"e-commerce-innocaption.appspot.com\",\n  messagingSenderId: \"847737154492\",\n  appId: \"1:847737154492:web:5ecf4c77c48010386c59b9\"\n};\n\nconst firebaseApp = initializeApp(firebaseConfig);\n\n\nconst googleProvider = new GoogleAuthProvider();\n\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account',\n});\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => {\n    signInWithPopup(auth, googleProvider).catch((error) => {\n        console.log(\"Caught error Popup closed\");\n      });;\n}\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\n\nexport const db = getFirestore();\n\nexport const createUserDocumentFromAuth = async (\n    userAuth,\n    additionalInformation = {}\n  ) => {\n    if (!userAuth) return;\n  \n    const userDocRef = doc(db, 'users', userAuth.uid);\n  \n    const userSnapshot = await getDoc(userDocRef);\n  \n    if (!userSnapshot.exists()) {\n      const { displayName, email } = userAuth;\n      const createdAt = new Date();\n  \n      try {\n        await setDoc(userDocRef, {\n          displayName,\n          email,\n          createdAt,\n          ...additionalInformation,\n        });\n      } catch (error) {\n        console.log('error creating the user', error.message);\n      }\n    }\n  \n    return userDocRef;\n  };\n  \n  export const createAuthUserWithEmailAndPassword = async (email, password) => {\n    if (!email || !password) return;\n  \n    return await createUserWithEmailAndPassword(auth, email, password);\n  };\n  \n  export const signInAuthUserWithEmailAndPassword = async (email, password) => {\n    if (!email || !password) return;\n  \n    return await signInWithEmailAndPassword(auth, email, password);\n  };\n  \n  export const signOutUser = async () => await signOut(auth);\n  \n  export const onAuthStateChangedListener = (callback) =>\n    onAuthStateChanged(auth, callback);"],"mappings":"AAAA;AACA,SAASA,aAAa,QAAQ,cAAc;AAE5C,SACIC,OAAO,EACPC,kBAAkB,EAClBC,eAAe,EACfC,kBAAkB,EAClBC,8BAA8B,EAC9BC,0BAA0B,EAC1BC,OAAO,EACPC,kBAAkB,QACb,eAAe;AAExB,SAASC,YAAY,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;AAEtE,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,wCAAwC;EACpDC,SAAS,EAAE,wBAAwB;EACnCC,aAAa,EAAE,oCAAoC;EACnDC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,WAAW,GAAGpB,aAAa,CAACa,cAAc,CAAC;AAGjD,MAAMQ,cAAc,GAAG,IAAIjB,kBAAkB,CAAC,CAAC;AAE/CiB,cAAc,CAACC,mBAAmB,CAAC;EACjCC,MAAM,EAAE;AACV,CAAC,CAAC;AAEF,OAAO,MAAMC,IAAI,GAAGvB,OAAO,CAAC,CAAC;AAC7B,OAAO,MAAMwB,qBAAqB,GAAGA,CAAA,KAAM;EACvCtB,eAAe,CAACqB,IAAI,EAAEH,cAAc,CAAC,CAACK,KAAK,CAAEC,KAAK,IAAK;IACnDC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;EAC1C,CAAC,CAAC;EAAC;AACT,CAAC;AACD,OAAO,MAAMC,wBAAwB,GAAGA,CAAA,KAAM5B,kBAAkB,CAACsB,IAAI,EAAEH,cAAc,CAAC;AAEtF,OAAO,MAAMU,EAAE,GAAGtB,YAAY,CAAC,CAAC;AAEhC,OAAO,MAAMuB,0BAA0B,GAAG,MAAAA,CACtCC,QAAQ,EACRC,qBAAqB,GAAG,CAAC,CAAC,KACvB;EACH,IAAI,CAACD,QAAQ,EAAE;EAEf,MAAME,UAAU,GAAGzB,GAAG,CAACqB,EAAE,EAAE,OAAO,EAAEE,QAAQ,CAACG,GAAG,CAAC;EAEjD,MAAMC,YAAY,GAAG,MAAM1B,MAAM,CAACwB,UAAU,CAAC;EAE7C,IAAI,CAACE,YAAY,CAACC,MAAM,CAAC,CAAC,EAAE;IAC1B,MAAM;MAAEC,WAAW;MAAEC;IAAM,CAAC,GAAGP,QAAQ;IACvC,MAAMQ,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;IAE5B,IAAI;MACF,MAAM9B,MAAM,CAACuB,UAAU,EAAE;QACvBI,WAAW;QACXC,KAAK;QACLC,SAAS;QACT,GAAGP;MACL,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,KAAK,CAACgB,OAAO,CAAC;IACvD;EACF;EAEA,OAAOR,UAAU;AACnB,CAAC;AAED,OAAO,MAAMS,kCAAkC,GAAG,MAAAA,CAAOJ,KAAK,EAAEK,QAAQ,KAAK;EAC3E,IAAI,CAACL,KAAK,IAAI,CAACK,QAAQ,EAAE;EAEzB,OAAO,MAAMxC,8BAA8B,CAACmB,IAAI,EAAEgB,KAAK,EAAEK,QAAQ,CAAC;AACpE,CAAC;AAED,OAAO,MAAMC,kCAAkC,GAAG,MAAAA,CAAON,KAAK,EAAEK,QAAQ,KAAK;EAC3E,IAAI,CAACL,KAAK,IAAI,CAACK,QAAQ,EAAE;EAEzB,OAAO,MAAMvC,0BAA0B,CAACkB,IAAI,EAAEgB,KAAK,EAAEK,QAAQ,CAAC;AAChE,CAAC;AAED,OAAO,MAAME,WAAW,GAAG,MAAAA,CAAA,KAAY,MAAMxC,OAAO,CAACiB,IAAI,CAAC;AAE1D,OAAO,MAAMwB,0BAA0B,GAAIC,QAAQ,IACjDzC,kBAAkB,CAACgB,IAAI,EAAEyB,QAAQ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}